// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SearchBugs.Persistence;

#nullable disable

namespace SearchBugs.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240728234950_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<Guid>("BugId1")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id1");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("file_name");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_attachment");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_attachment_bug_id");

                    b.HasIndex("BugId1")
                        .HasDatabaseName("ix_attachment_bug_id1");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Bug", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer")
                        .HasColumnName("priority_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uuid")
                        .HasColumnName("reporter_id");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("severity");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_bug");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_bug_assignee_id");

                    b.HasIndex("PriorityId")
                        .HasDatabaseName("ix_bug_priority_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_bug_project_id");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("ix_bug_reporter_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_bug_status_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_bug_title");

                    b.ToTable("bug", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugCustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<Guid?>("BugId1")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id1");

                    b.Property<Guid>("CustomFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("custom_field_id");

                    b.Property<Guid?>("CustomFieldId1")
                        .HasColumnType("uuid")
                        .HasColumnName("custom_field_id1");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_bug_custom_field");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_bug_custom_field_bug_id");

                    b.HasIndex("BugId1")
                        .HasDatabaseName("ix_bug_custom_field_bug_id1");

                    b.HasIndex("CustomFieldId")
                        .HasDatabaseName("ix_bug_custom_field_custom_field_id");

                    b.HasIndex("CustomFieldId1")
                        .HasDatabaseName("ix_bug_custom_field_custom_field_id1");

                    b.ToTable("bug_custom_field", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<DateTime>("ChangedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at_utc");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by");

                    b.Property<string>("FieldChanged")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("field_changed");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("old_value");

                    b.HasKey("Id")
                        .HasName("pk_bug_history");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_bug_history_bug_id");

                    b.HasIndex("ChangedBy")
                        .HasDatabaseName("ix_bug_history_changed_by");

                    b.ToTable("bug_history", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_bug_priority");

                    b.ToTable("bug_priority", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "High"
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_bug_status");

                    b.ToTable("bug_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Resolved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("comment_text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_comment_bug_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comment_user_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.CustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("field_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("ProjectId1")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id1");

                    b.HasKey("Id")
                        .HasName("pk_custom_field");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_custom_field_name");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_custom_field_project_id");

                    b.HasIndex("ProjectId1")
                        .HasDatabaseName("ix_custom_field_project_id1");

                    b.ToTable("custom_field", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.TimeTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logged_at");

                    b.Property<DateTime?>("TimeSpent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_spent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_time_track");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_time_track_bug_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_time_track_user_id");

                    b.ToTable("time_track", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_notification_bug_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Projects.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_role");

                    b.ToTable("project_role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tester"
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Projects.ProjectRoleUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("ProjectRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("project_role_id");

                    b.HasKey("ProjectId", "UserId", "RoleId")
                        .HasName("pk_project_role_user");

                    b.HasIndex("ProjectRoleId")
                        .HasDatabaseName("ix_project_role_user_project_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_role_user_user_id");

                    b.ToTable("project_role_user", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Repositories.BugRepository", b =>
                {
                    b.Property<Guid>("BugId")
                        .HasColumnType("uuid")
                        .HasColumnName("bug_id");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.HasKey("BugId", "RepositoryId")
                        .HasName("pk_bug_repository");

                    b.HasIndex("BugId")
                        .HasDatabaseName("ix_bug_repository_bug_id");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_bug_repository_repository_id");

                    b.ToTable("bug_repository", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Repositories.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_repository");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_repository_project_id");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("ix_repository_url");

                    b.ToTable("repository", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Roles.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Can create a new user",
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Can view user details",
                            Name = "ViewUserDetails"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Can update user details",
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Can delete a user",
                            Name = "DeleteUser"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Can authenticate a user",
                            Name = "AuthenticateUser"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Can change user password",
                            Name = "ChangeUserPassword"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Can list all users",
                            Name = "ListAllUsers"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Can Create Project",
                            Name = "CreateProject"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Can View Project Details",
                            Name = "ViewUserDetails"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Can Update Project",
                            Name = "UpdateProject"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Can Delete Project",
                            Name = "DeleteProject"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Can List All Projects",
                            Name = "ListAllProjects"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Can Create Bug",
                            Name = "CreateBug"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Can View Bug Details",
                            Name = "ViewBugDetails"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Can Update Bug",
                            Name = "UpdateBug"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Can Delete Bug",
                            Name = "DeleteBug"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Can List All Bugs",
                            Name = "ListAllBugs"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Can Add Comment To Bug",
                            Name = "AddCommentToBug"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Can View Bug Comments",
                            Name = "ViewBugComments"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Can Add Attachment To Bug",
                            Name = "AddAttachmentToBug"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Can View Bug Attachments",
                            Name = "ViewBugAttachments"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Can View Bug History",
                            Name = "ViewBugHistory"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Can Track Time Spent On Bug",
                            Name = "TrackTimeSpentOnBug"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Can View Time Spent On Bug",
                            Name = "ViewTimeSpentOnBug"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Can Add Custom Field To Bug",
                            Name = "AddCustomFieldToBug"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Can View Custom Field On Bug",
                            Name = "ViewCustomFieldOnBug"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Can View Notification",
                            Name = "ViewNotification"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Can Delete Notification",
                            Name = "DeleteNotification"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Can Mark Notification As Read",
                            Name = "MarkNotificationAsRead"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Can Create Repository",
                            Name = "CreateRepository"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Can View Repository Details",
                            Name = "ViewRepositoryDetails"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Can Update Repository",
                            Name = "UpdateRepository"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Can Delete Repository",
                            Name = "DeleteRepository"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Can List All Repositories",
                            Name = "ListAllRepositories"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Can Link Bug To Repository",
                            Name = "LinkBugToRepository"
                        },
                        new
                        {
                            Id = 37,
                            Description = "Can View Bug Repository",
                            Name = "ViewBugRepository"
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Reporter"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permission_role_id");

                    b.ToTable("role_permission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 5,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 36
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 37
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 34
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 35
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 36
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 37
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 34
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 35
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 36
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 37
                        });
                });

            modelBuilder.Entity("SearchBugs.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Attachment", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany("Attachments")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachment_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Bugs.Bug", "Bug")
                        .WithMany()
                        .HasForeignKey("BugId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachment_bug_bug_id1");

                    b.Navigation("Bug");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Bug", b =>
                {
                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_user_assignee_id");

                    b.HasOne("SearchBugs.Domain.Bugs.BugPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_bug_priorities_priority_id");

                    b.HasOne("SearchBugs.Domain.Projects.Project", null)
                        .WithMany("Bugs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_project_project_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_user_reporter_id");

                    b.HasOne("SearchBugs.Domain.Bugs.BugStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_bug_statuses_status_id");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugCustomField", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany()
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_custom_field_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany("BugCustomFields")
                        .HasForeignKey("BugId1")
                        .HasConstraintName("fk_bug_custom_field_bug_bug_id1");

                    b.HasOne("SearchBugs.Domain.Bugs.CustomField", null)
                        .WithMany()
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_custom_field_custom_field_custom_field_id");

                    b.HasOne("SearchBugs.Domain.Bugs.CustomField", null)
                        .WithMany("BugCustomFields")
                        .HasForeignKey("CustomFieldId1")
                        .HasConstraintName("fk_bug_custom_field_custom_field_custom_field_id1");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.BugHistory", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany("BugHistories")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_history_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_history_user_changed_by");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Comment", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany("Comments")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_user_user_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.CustomField", b =>
                {
                    b.HasOne("SearchBugs.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_custom_field_project_project_id");

                    b.HasOne("SearchBugs.Domain.Projects.Project", null)
                        .WithMany("CustomsFields")
                        .HasForeignKey("ProjectId1")
                        .HasConstraintName("fk_custom_field_project_project_id1");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.TimeTracking", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany("TimeTracking")
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_track_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_track_user_user_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany()
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_user_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Projects.ProjectRoleUser", b =>
                {
                    b.HasOne("SearchBugs.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_user_project_project_id");

                    b.HasOne("SearchBugs.Domain.Projects.ProjectRole", null)
                        .WithMany()
                        .HasForeignKey("ProjectRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_user_project_role_project_role_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_user_user_user_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Repositories.BugRepository", b =>
                {
                    b.HasOne("SearchBugs.Domain.Bugs.Bug", null)
                        .WithMany()
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_repository_bug_bug_id");

                    b.HasOne("SearchBugs.Domain.Repositories.Repository", null)
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bug_repository_repository_repository_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Repositories.Repository", b =>
                {
                    b.HasOne("SearchBugs.Domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_project_project_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("SearchBugs.Domain.Roles.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("SearchBugs.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Users.User", b =>
                {
                    b.OwnsOne("SearchBugs.Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(225)
                                .HasColumnType("character varying(225)")
                                .HasColumnName("email_value");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.OwnsOne("SearchBugs.Domain.Users.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name_last_name");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SearchBugs.Domain.Users.UserRole", b =>
                {
                    b.HasOne("SearchBugs.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("SearchBugs.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.Bug", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BugCustomFields");

                    b.Navigation("BugHistories");

                    b.Navigation("Comments");

                    b.Navigation("TimeTracking");
                });

            modelBuilder.Entity("SearchBugs.Domain.Bugs.CustomField", b =>
                {
                    b.Navigation("BugCustomFields");
                });

            modelBuilder.Entity("SearchBugs.Domain.Projects.Project", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("CustomsFields");
                });
#pragma warning restore 612, 618
        }
    }
}
